# Сортировка элементов по возрастанию
def qsort(array, left, right):
    middle = (left+right) // 2

    p = array[middle]
    i, j = left, right
    while i <= j:
        while array[i] < p:
            i += 1
        while array[j] > p:
            j -= 1
        if i <= j:
            array[i], array[j] = array[j], array[i]
            i += 1
            j -= 1

    if j > left:
        qsort(array, left, j)
    if right > i:
        qsort(array, i, right)
    return array


# Установка позиции числа в последовательности 
# и поиск ближайших элементов числа
def binary_search(array, element, left, right):
    if left > right:
        return False
    middle = (right + left) // 2
    if array[middle] == element:
        x = array[: middle]
        for i in x:
            if i == element:
                x.remove(element)
        index_left = (len(x) - 1)
        y = array[middle:]
        for n in y:
            if n <= element and len(y) > 1:
                y.remove(n)
        f = y[0]
        index_right = array.index(f)
        if index_left < 0:
            print('Это первый элемент списка. Индекс большего числа справа =', index_right)
        elif index_right == len(array) - 1:
            print(f'Индекс меньшего числа слева = {index_left}. Это последний элемент списка')
        else:
            print(f'Индекс меньшего числа слева = {index_left}. Индекс большего числа справа = {index_right}')
        return index_left, index_right
    elif element < array[middle]:
        return binary_search(array, element, left, middle - 1)
    else:
        return binary_search(array, element, middle + 1, right)

# Делаем проверку на то, чтобы пользователь ввёл последовательность
# именно чисел и именно с пробелом

# Ввод последовательности
while True:
    try:
        sequence = input("Введите последовательность чисел (через пробел)\n>>> ")
        if " " in sequence:
            sequence = list(map(int, sequence.split()))
            break
        else:
            raise ValueError
    except ValueError:
        print("---" * 19)
        print("Введите именно последовательньсть чисел (ЧЕРЕЗ ПРОБЕЛ)!!!")
        print("---" * 19)
    pass

#  Делаем проверку на то, чтобы пользователь ввёл
#  именно число и оно было одно

# Ввод одиночного числа
while True:
    try:
        any_number = input("Введите рандомное число\n>>> ")
        if " " not in any_number:
            any_number = int(any_number)
            break
        else:
            raise ValueError
    except ValueError:
        print("---" * 15)
        print("Введите именно число (ИМЕННО ОДНО)!!!")
        print("---" * 15)
    pass

sequence = qsort(sequence, 0, len(sequence[:-1]))  # отсортированная последовательность
print(sequence)
print()
element = binary_search(sequence, any_number, 0, len(sequence))  # позиция числа
if element is False:
    print("Введенное число не найдено в последовательности")
